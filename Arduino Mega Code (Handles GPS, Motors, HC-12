#include <TinyGPS++.h>
#include <SoftwareSerial.h>

// Debug Mode (comment out for deployment)
#define DEBUG

// GPS Module (NEO-M8N)
TinyGPSPlus gps;
#define GPS_SERIAL Serial1  // TX1=18, RX1=19

// HC-12 Wireless
#define HC12_SERIAL Serial2 // TX2=16, RX2=17

// Motor Control (L293D)
const int ENA = 12;  // PWM Left
const int ENB = 13;  // PWM Right
const int motorPin1 = 8;   // Left Dir1
const int motorPin2 = 9;   // Left Dir2
const int motorPin3 = 11;  // Right Dir1
const int motorPin4 = 10;  // Right Dir2

// System Parameters
const float MAX_SPEED_MPS = 0.3333;  // Max linear speed (m/s)
const unsigned long MOTOR_TIMEOUT_MS = 1000;  // Safety timeout
const float WAYPOINT_TOLERANCE = 5.0;  // meters (sync with MATLAB)

// Navigation
const double waypoints[][2] = {
  {7.214941000, 124.249145000}, {7.214940679, 124.249146167}, {7.214940357, 124.249147333},
  {7.214940036, 124.249148500}, {7.214939714, 124.249149667}, {7.214939393, 124.249150833},
  {7.214939071, 124.249152000}, {7.214938750, 124.249153167}, {7.214938429, 124.249154333},
  {7.214938107, 124.249155500}, {7.214937786, 124.249156667}, {7.214937464, 124.249157833},
  {7.214937143, 124.249159000}, {7.214936821, 124.249160167}, {7.214936500, 124.249161333},
  {7.214936179, 124.249162500}, {7.214935857, 124.249163667}, {7.214935536, 124.249164833},
  {7.214935214, 124.249166000}, {7.214934893, 124.249167167}, {7.214934571, 124.249168333},
  {7.214934250, 124.249169500}, {7.214933929, 124.249170667}, {7.214933607, 124.249171833},
  {7.214933286, 124.249173000}, {7.214932964, 124.249174167}, {7.214932643, 124.249175333},
  {7.214932321, 124.249176500}, {7.214932000, 124.249177667}, {7.214931679, 124.249178833},
  {7.214931357, 124.249180000}, {7.214931036, 124.249181167}, {7.214930714, 124.249182333},
  {7.214930393, 124.249183500}, {7.214930071, 124.249184667}, {7.214929750, 124.249185833},
  {7.214929429, 124.249187000}, {7.214929107, 124.249188167}, {7.214928786, 124.249189333},
  {7.214928464, 124.249190500}, {7.214928143, 124.249191667}, {7.214927821, 124.249192833},
  {7.214927500, 124.249194000}, {7.214927179, 124.249195167}, {7.214926857, 124.249196333},
  {7.214926536, 124.249197500}, {7.214926214, 124.249198667}, {7.214925893, 124.249199833},
  {7.214925571, 124.249201000}, {7.214925250, 124.249202167}, {7.214924929, 124.249203333},
  {7.214924607, 124.249204500}, {7.214924286, 124.249205667}, {7.214923964, 124.249206833},
  {7.214923643, 124.249208000}, {7.214923321, 124.249209167}, {7.214923000, 124.249210333},
  {7.214922679, 124.249211500}, {7.214922357, 124.249212667}, {7.214922036, 124.249213833},
  {7.214921714, 124.249215000}, {7.214921393, 124.249216167}, {7.214921071, 124.249217333},
  {7.214920750, 124.249218500}, {7.214920429, 124.249219667}, {7.214920107, 124.249220833},
  {7.214919786, 124.249222000}, {7.214919464, 124.249223167}, {7.214919143, 124.249224333},
  {7.214918821, 124.249225500}, {7.214918500, 124.249226667}, {7.214918179, 124.249227833},
  {7.214917857, 124.249229000}, {7.214917536, 124.249230167}, {7.214917214, 124.249231333},
  {7.214916893, 124.249232500}, {7.214916571, 124.249233667}, {7.214916250, 124.249234833},
  {7.214915929, 124.249236000}, {7.214915607, 124.249237167}, {7.214915286, 124.249238333},
  {7.214914964, 124.249239500}, {7.214914643, 124.249240667}, {7.214914321, 124.249241833},
  {7.214914000, 124.249243000}
};
int currentWaypoint = 0;
unsigned long lastCommandTime = 0;

// Debug Macros
#ifdef DEBUG
#define DEBUG_PRINT(x) Serial.print(x)
#define DEBUG_PRINTLN(x) Serial.println(x)
#else
#define DEBUG_PRINT(x)
#define DEBUG_PRINTLN(x)
#endif

void setup() {
  #ifdef DEBUG
  Serial.begin(9600);
  DEBUG_PRINTLN("System Initializing...");
  #endif

  GPS_SERIAL.begin(9600);
  HC12_SERIAL.begin(9600);

  // Initialize motor pins
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(motorPin3, OUTPUT);
  pinMode(motorPin4, OUTPUT);
  
  // Stop motors initially
  stopMotors();
  DEBUG_PRINTLN("Initialization Complete");
}

void loop() {
  // 1. GPS Data Handling
  while (GPS_SERIAL.available() > 0) {
    if (gps.encode(GPS_SERIAL.read())) {
      if (gps.location.isUpdated()) {
        // Send data to MATLAB: lat,lng,heading
        HC12_SERIAL.print(gps.location.lat(), 9);
        HC12_SERIAL.print(",");
        HC12_SERIAL.print(gps.location.lng(), 9);
        HC12_SERIAL.print(",");
        HC12_SERIAL.println(gps.course.deg());
        
        #ifdef DEBUG
        DEBUG_PRINT("Position: ");
        DEBUG_PRINT(gps.location.lat(), 9);
        DEBUG_PRINT(", ");
        DEBUG_PRINT(gps.location.lng(), 9);
        DEBUG_PRINT(", Heading: ");
        DEBUG_PRINTLN(gps.course.deg());
        #endif
      }
    }
  }

  // 2. Motor Command Handling
  if (HC12_SERIAL.available() > 0) {
    String command = HC12_SERIAL.readStringUntil('\n');
    command.trim();
    
    int comma1 = command.indexOf(',');
    int comma2 = command.indexOf(',', comma1 + 1);
    
    if (comma1 > 0 && comma2 > comma1) {
      lastCommandTime = millis();
      
      int pwm_left = command.substring(0, comma1).toInt();
      int pwm_right = command.substring(comma1 + 1, comma2).toInt();
      int waypointReached = command.substring(comma2 + 1).toInt();

      // Update waypoint
      if (waypointReached == 1) {
        currentWaypoint++;
        if (currentWaypoint >= sizeof(waypoints) / sizeof(waypoints[0])) {
          currentWaypoint = 0;
        }
        DEBUG_PRINT("New Waypoint: ");
        DEBUG_PRINTLN(currentWaypoint);
      }

      // Drive motors
      setMotorSpeeds(pwm_left, pwm_right);
    }
  }

  // 3. Safety Check
  if (millis() - lastCommandTime > MOTOR_TIMEOUT_MS) {
    stopMotors();
    #ifdef DEBUG
    if (millis() % 2000 < 100) {  // Blink warning
      DEBUG_PRINTLN("WARNING: Motor timeout - No commands received");
    }
    #endif
  }
}

void setMotorSpeeds(int left, int right) {
  // Left Motor
  if (left > 0) {
    digitalWrite(motorPin1, HIGH);
    digitalWrite(motorPin2, LOW);
    analogWrite(ENA, constrain(abs(left), 0, 255));
  } else {
    digitalWrite(motorPin1, LOW);
    digitalWrite(motorPin2, HIGH);
    analogWrite(ENA, constrain(abs(left), 0, 255));
  }

  // Right Motor
  if (right > 0) {
    digitalWrite(motorPin3, HIGH);
    digitalWrite(motorPin4, LOW);
    analogWrite(ENB, constrain(abs(right), 0, 255));
  } else {
    digitalWrite(motorPin3, LOW);
    digitalWrite(motorPin4, HIGH);
    analogWrite(ENB, constrain(abs(right), 0, 255));
  }
}

void stopMotors() {
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
  digitalWrite(motorPin3, LOW);
  digitalWrite(motorPin4, LOW);
}

double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
  const double R = 6371000; // Earth radius in meters
  double dLat = radians(lat2 - lat1);
  double dLon = radians(lon2 - lon1);
  double a = sin(dLat/2) * sin(dLat/2) +
             cos(radians(lat1)) * cos(radians(lat2)) * 
             sin(dLon/2) * sin(dLon/2);
  double c = 2 * atan2(sqrt(a), sqrt(1-a));
  return R * c;
}
