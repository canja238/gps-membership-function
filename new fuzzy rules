function path_following()
    % Create new FIS using modern syntax
    fis = mamfis('Name', 'path_following');
    
    % Add distance_error input (3 membership functions)
    fis = addInput(fis, [0 5], 'Name', 'distance_error');
    fis = addMF(fis, 'distance_error', 'trimf', [0 0 2.5], 'Name', 'Close');
    fis = addMF(fis, 'distance_error', 'trimf', [0.5 2.5 4.5], 'Name', 'Medium');
    fis = addMF(fis, 'distance_error', 'trimf', [2.5 5 5], 'Name', 'Far');
    
    % Add heading_error input (3 membership functions)
    fis = addInput(fis, [-180 180], 'Name', 'heading_error');
    fis = addMF(fis, 'heading_error', 'trimf', [-180 -180 -45], 'Name', 'Left');
    fis = addMF(fis, 'heading_error', 'trimf', [-90 0 90], 'Name', 'Straight');
    fis = addMF(fis, 'heading_error', 'trimf', [45 180 180], 'Name', 'Right');
    
    % Add pwm_left output (3 membership functions)
    fis = addOutput(fis, [-100 100], 'Name', 'pwm_left');
    fis = addMF(fis, 'pwm_left', 'trimf', [-100 -100 0], 'Name', 'Reverse');
    fis = addMF(fis, 'pwm_left', 'trimf', [-50 0 50], 'Name', 'Slow');
    fis = addMF(fis, 'pwm_left', 'trimf', [0 100 100], 'Name', 'Forward');
    
    % Add pwm_right output (same as pwm_left)
    fis = addOutput(fis, [-100 100], 'Name', 'pwm_right');
    fis = addMF(fis, 'pwm_right', 'trimf', [-100 -100 0], 'Name', 'Reverse');
    fis = addMF(fis, 'pwm_right', 'trimf', [-50 0 50], 'Name', 'Slow');
    fis = addMF(fis, 'pwm_right', 'trimf', [0 100 100], 'Name', 'Forward');
    
    % Simplified 3x3 Rule Base
    ruleList = [
    1  1  3  1  1  1;  % If Close and Left, then Forward Left and Reverse Right
    1  2  2  2  1  1;  % If Close and Straight, then Slow both
    1  3  1  3  1  1;  % If Close and Right, then Reverse Left and Forward Right
    
    2  1  3  2  1  1;  % If Medium and Left, then Forward Left and Slow Right
    2  2  3  3  1  1;  % If Medium and Straight, then Forward both
    2  3  2  3  1  1;  % If Medium and Right, then Slow Left and Forward Right
    
    3  1  3  1  1  1;  % If Far and Left, then Forward Left and Reverse Right
    3  2  3  3  1  1;  % If Far and Straight, then Forward both
    3  3  1  3  1  1;  % If Far and Right, then Reverse Left and Forward Right
    ];
    
    fis = addRule(fis, ruleList);
    
    % Save FIS
    writeFIS(fis, 'path_following');
    
    % Plot membership functions
    figure;
    subplot(2,2,1); plotmf(fis, 'input', 1); title('Distance Error');
    subplot(2,2,2); plotmf(fis, 'input', 2); title('Heading Error');
    subplot(2,2,3); plotmf(fis, 'output', 1); title('PWM Left');
    subplot(2,2,4); plotmf(fis, 'output', 2); title('PWM Right');
    
    % Plot rule surface
    figure;
    gensurf(fis);
    title('Control Surface');
end
