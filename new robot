#include <TinyGPS++.h>
#include <SoftwareSerial.h>

// Debug Mode (uncomment for debugging)
#define DEBUG

#ifdef DEBUG
  #define DEBUG_PRINT(x) Serial.print(x)
  #define DEBUG_PRINTLN(x) Serial.println(x)
#else
  #define DEBUG_PRINT(x)
  #define DEBUG_PRINTLN(x)
#endif

// GPS Module (NEO-M8N)
TinyGPSPlus gps;
#define GPS_SERIAL Serial1  // TX1=18, RX1=19

// HC-12 Wireless
#define HC12_SERIAL Serial2 // TX2=16, RX2=17

// Motor Control (L293D)
const int ENA = 12;  // PWM Left
const int ENB = 13;  // PWM Right
const int motorPin1 = 8;   // Left Dir1
const int motorPin2 = 9;   // Left Dir2
const int motorPin3 = 11;  // Right Dir1
const int motorPin4 = 10;  // Right Dir2

// System Parameters
const unsigned long MOTOR_TIMEOUT_MS = 1000;  // Safety timeout
unsigned long lastCommandTime = 0;

// Communication
const unsigned long GPS_UPDATE_INTERVAL = 500; // ms
unsigned long lastGPSUpdate = 0;

void setup() {
  #ifdef DEBUG
  Serial.begin(115200);
  DEBUG_PRINTLN("Robot Initializing...");
  #endif

  GPS_SERIAL.begin(9600);
  HC12_SERIAL.begin(9600);

  // Initialize motor pins
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(motorPin3, OUTPUT);
  pinMode(motorPin4, OUTPUT);
  
  // Stop motors initially
  stopMotors();
  DEBUG_PRINTLN("Initialization Complete");
}

void loop() {
  // 1. GPS Data Handling
  if (millis() - lastGPSUpdate > GPS_UPDATE_INTERVAL) {
    while (GPS_SERIAL.available() > 0) {
      if (gps.encode(GPS_SERIAL.read())) {
        if (gps.location.isValid() && gps.location.isUpdated()) {
          // Format: LAT:value,LON:value,HDG:value
          String gpsData = "LAT:" + String(gps.location.lat(), 9) + 
                          ",LON:" + String(gps.location.lng(), 9) + 
                          ",HDG:" + (gps.course.isValid() ? String(gps.course.deg(), 1) : "0.0");
          
          HC12_SERIAL.println(gpsData);
          DEBUG_PRINTLN("SENT: " + gpsData);
          lastGPSUpdate = millis();
        }
      }
    }
  }

  // 2. Motor Command Handling
  if (HC12_SERIAL.available() > 0) {
    String command = HC12_SERIAL.readStringUntil('\n');
    command.trim();
    DEBUG_PRINTLN("CMD: " + command);
    
    int comma1 = command.indexOf(',');
    int comma2 = command.indexOf(',', comma1 + 1);
    
    if (comma1 > 0 && comma2 > comma1) {
      lastCommandTime = millis();
      
      int pwm_left = command.substring(0, comma1).toInt();
      int pwm_right = command.substring(comma1 + 1, comma2).toInt();
      int waypointReached = command.substring(comma2 + 1).toInt();

      // Drive motors
      setMotorSpeeds(pwm_left, pwm_right);
      
      // Send ACK
      HC12_SERIAL.println("ACK");
      DEBUG_PRINTLN("ACK sent");
    }
  }

  // 3. Safety Check
  if (millis() - lastCommandTime > MOTOR_TIMEOUT_MS) {
    stopMotors();
    #ifdef DEBUG
    static unsigned long lastWarning = 0;
    if (millis() - lastWarning > 2000) {
      lastWarning = millis();
      DEBUG_PRINTLN("WARNING: Motor timeout - No commands received");
    }
    #endif
  }
}

void setMotorSpeeds(int left, int right) {
  // Constrain PWM values
  left = constrain(left, -255, 255);
  right = constrain(right, -255, 255);

  // Left Motor
  if (left > 0) {
    digitalWrite(motorPin1, HIGH);
    digitalWrite(motorPin2, LOW);
  } else {
    digitalWrite(motorPin1, LOW);
    digitalWrite(motorPin2, HIGH);
  }
  analogWrite(ENA, abs(left));

  // Right Motor
  if (right > 0) {
    digitalWrite(motorPin3, HIGH);
    digitalWrite(motorPin4, LOW);
  } else {
    digitalWrite(motorPin3, LOW);
    digitalWrite(motorPin4, HIGH);
  }
  analogWrite(ENB, abs(right));
}

void stopMotors() {
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
  digitalWrite(motorPin3, LOW);
  digitalWrite(motorPin4, LOW);
}
