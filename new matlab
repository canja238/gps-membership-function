function gps_navigation_controller()
    % Clear workspace and close all figures
    clear; clc; close all;
    
    % Serial Port Configuration
    port = 'COM8'; % Adjust to your COM port
    baudrate = 115200;
    
    % Load Fuzzy Logic System
    fis = readfis('path_following.fis');
    
    % Waypoints (define your path here)
    waypoints = [
7.214941000, 124.249145000; 7.214940679, 124.249146167; 7.214940357, 124.249147333;
  7.214940036, 124.249148500; 7.214939714, 124.249149667; 7.214939393, 124.249150833;
  7.214939071, 124.249152000; 7.214938750, 124.249153167; 7.214938429, 124.249154333;
  7.214938107, 124.249155500; 7.214937786, 124.249156667; 7.214937464, 124.249157833;
  7.214937143, 124.249159000; 7.214936821, 124.249160167; 7.214936500, 124.249161333;
  7.214936179, 124.249162500; 7.214935857, 124.249163667; 7.214935536, 124.249164833;
  7.214935214, 124.249166000; 7.214934893, 124.249167167; 7.214934571, 124.249168333;
  7.214934250, 124.249169500; 7.214933929, 124.249170667; 7.214933607, 124.249171833;
  7.214933286, 124.249173000; 7.214932964, 124.249174167; 7.214932643, 124.249175333;
  7.214932321, 124.249176500; 7.214932000, 124.249177667; 7.214931679, 124.249178833;
  7.214931357, 124.249180000; 7.214931036, 124.249181167; 7.214930714, 124.249182333;
  7.214930393, 124.249183500; 7.214930071, 124.249184667; 7.214929750, 124.249185833;
  7.214929429, 124.249187000; 7.214929107, 124.249188167; 7.214928786, 124.249189333;
  7.214928464, 124.249190500; 7.214928143, 124.249191667; 7.214927821, 124.249192833;
  7.214927500, 124.249194000; 7.214927179, 124.249195167; 7.214926857, 124.249196333;
  7.214926536, 124.249197500; 7.214926214, 124.249198667; 7.214925893, 124.249199833;
  7.214925571, 124.249201000; 7.214925250, 124.249202167; 7.214924929, 124.249203333;
  7.214924607, 124.249204500; 7.214924286, 124.249205667; 7.214923964, 124.249206833;
  7.214923643, 124.249208000; 7.214923321, 124.249209167; 7.214923000, 124.249210333;
  7.214922679, 124.249211500; 7.214922357, 124.249212667; 7.214922036, 124.249213833;
  7.214921714, 124.249215000; 7.214921393, 124.249216167; 7.214921071, 124.249217333;
  7.214920750, 124.249218500; 7.214920429, 124.249219667; 7.214920107, 124.249220833;
  7.214919786, 124.249222000; 7.214919464, 124.249223167; 7.214919143, 124.249224333;
  7.214918821, 124.249225500; 7.214918500, 124.249226667; 7.214918179, 124.249227833;
  7.214917857, 124.249229000; 7.214917536, 124.249230167; 7.214917214, 124.249231333;
  7.214916893, 124.249232500; 7.214916571, 124.249233667; 7.214916250, 124.249234833;
  7.214915929, 124.249236000; 7.214915607, 124.249237167; 7.214915286, 124.249238333;
  7.214914964, 124.249239500; 7.214914643, 124.249240667; 7.214914321, 124.249241833;
  7.214914000, 124.249243000;
    ];
    
    % System Parameters
    MAX_PWM = 255;
    BASE_PWM = 128; % Adjust based on your robot's speed
    WAYPOINT_TOLERANCE = 5.0; % meters
    COMMAND_TIMEOUT = 1.0; % seconds
    currentWaypoint = 1;
    
    % Initialize Serial Connection
    try
        s = serialport(port, baudrate);
        configureTerminator(s, "LF");
        flush(s);
    catch ME
        error('Failed to initialize serial port: %s', ME.message);
    end
    
    % Create Visualization
    hFig = figure('Name', 'GPS Navigation', 'NumberTitle', 'off');
    hPath = plot(waypoints(:,2), waypoints(:,1), 'b-o');
    hold on;
    hRobot = plot(nan, nan, 'ro', 'MarkerFaceColor', 'r');
    hTarget = plot(waypoints(1,2), waypoints(1,1), 'gx', 'LineWidth', 2);
    xlabel('Longitude');
    ylabel('Latitude');
    title('Real-time Navigation');
    grid on;
    axis equal;
    
    % Main Control Loop
    try
        while ishandle(hFig)
            % Read GPS Data
            if s.NumBytesAvailable > 0
                try
                    raw = readline(s);
                    if contains(raw, 'LAT:')
                        % Parse GPS Data
                        data = parseGPSData(raw);
                        
                        % Navigation Calculation
                        [pwm_left, pwm_right, wp_reached] = calculateNavigation(...
                            data, waypoints, currentWaypoint, fis, ...
                            WAYPOINT_TOLERANCE, BASE_PWM, MAX_PWM);
                        
                        % Waypoint Management
                        if wp_reached
                            currentWaypoint = currentWaypoint + 1;
                            if currentWaypoint > size(waypoints, 1)
                                currentWaypoint = 1; % Loop back
                            end
                            fprintf('Waypoint reached! Next: %d\n', currentWaypoint);
                        end
                        
                        % Send Motor Command
                        cmd = sprintf('%d,%d,%d', pwm_left, pwm_right, wp_reached);
                        writeline(s, cmd);
                        
                        % Update Visualization
                        set(hRobot, 'XData', data.lng, 'YData', data.lat);
                        set(hTarget, 'XData', waypoints(currentWaypoint,2), ...
                                     'YData', waypoints(currentWaypoint,1));
                        drawnow;
                    end
                catch
                    % Silently handle parse errors
                end
            end
            pause(0.05); % Control loop rate
        end
    catch ME
        % Emergency stop
        writeline(s, '0,0,0');
        delete(s);
        clear s;
        rethrow(ME);
    end
    
    % Cleanup
    writeline(s, '0,0,0');
    delete(s);
    clear s;
end

function data = parseGPSData(raw)
    % Parse "LAT:value,LON:value,HDG:value" format
    parts = strsplit(strtrim(raw), ',');
    data.lat = str2double(strrep(parts{1}, 'LAT:', ''));
    data.lng = str2double(strrep(parts{2}, 'LON:', ''));
    data.heading = str2double(strrep(parts{3}, 'HDG:', ''));
end

function [pwm_left, pwm_right, wp_reached] = calculateNavigation(...
        data, waypoints, currentWP, fis, tolerance, base_pwm, max_pwm)
    
    target = waypoints(currentWP,:);
    
    % Calculate distance error (meters)
    distance_error = deg2km(distance(data.lat, data.lng, target(1), target(2))) * 1000;
    
    % Calculate heading error (degrees)
    y = sind(target(2)-data.lng) * cosd(target(1));
    x = cosd(data.lat) * sind(target(1)) - sind(data.lat) * cosd(target(1)) * cosd(target(2)-data.lng);
    target_heading = atan2d(y, x);
    heading_error = wrapTo180(target_heading - data.heading);
    
    % Fuzzy Logic Control
    pwm_output = evalfis(fis, [distance_error, heading_error]);
    
    % Scale and constrain PWM values
    pwm_left = round(constrain(base_pwm * (pwm_output(1)/100), -max_pwm, max_pwm));
    pwm_right = round(constrain(base_pwm * (pwm_output(2)/100), -max_pwm, max_pwm));
    
    % Waypoint check
    wp_reached = distance_error < tolerance;
end

function dist = distance(lat1, lon1, lat2, lon2)
    R = 6371; % Earth radius in km
    dLat = deg2rad(lat2-lat1);
    dLon = deg2rad(lon2-lon1);
    a = sin(dLat/2)^2 + cos(deg2rad(lat1)) * cos(deg2rad(lat2)) * sin(dLon/2)^2;
    c = 2 * atan2(sqrt(a), sqrt(1-a));
    dist = R * c; % Distance in km
end

function y = constrain(x, min_val, max_val)
    y = min(max(x, min_val), max_val);
end
